#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        //zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWERTY";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R                      &kp T                 &kp Y         &kp U                       &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D     &kp F                      &kp G                 &kp H         &kp J                       &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V                      &kp B                 &kp N         &kp M                       &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                         &kp LGUI  &mt LALT LEFT_PARENTHESIS  &mt LEFT_GUI SPACE    &mt RGUI RET  &mt RALT RIGHT_PARENTHESIS  &tog 1
            >;
        };

        numeric {
            label = "NUMBER";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR      &kp PERCENT         &kp CARET          &kp AMPERSAND    &kp ASTERISK  &kp MINUS  &kp EQUAL  &kp BSPC
&kp N0     &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4    &kp N5              &kp NUMBER_6       &kp N7           &kp N8        &kp N9     &kp N0     &trans
&kp LSHFT  &trans           &trans        &trans        &kp LEFT_BRACE  &kp LEFT_BRACKET    &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &trans        &trans     &trans     &trans
                                          &kp LGUI      &trans          &kp SPACE           &kp RET            &trans           &kp RALT
            >;
        };

        raise_layer {
            label = "SYMBOL";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp STAR  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC  &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        movement {
            bindings = <
&trans     &kp LA(V)          &kp UP_ARROW  &trans                &trans     &trans    &trans          &trans        &trans    &trans     &trans  &trans
&kp LC(A)  &kp LEFT_ARROW     &kp DOWN      &kp RIGHT             &kp LC(E)  &trans    &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN  &kp RIGHT  &trans  &trans
&trans     &kp LA(LESS_THAN)  &kp LC(V)     &kp LA(GREATER_THAN)  &trans     &trans    &trans          &trans        &trans    &trans     &trans  &trans
                                            &trans                &trans     &trans    &trans          &trans        &trans
            >;
        };
    };
};
